services:
  api:
    container_name: api-nest
    build:
      dockerfile: Dockerfile
      context: .
      target: development
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - .env
    entrypoint: wait-for postgres:5432 -t 40 -- ./start-api.sh
    ports:
      - 3000:3000
    networks:
      - backend
    depends_on:
      - postgres

  postgres:
    container_name: api-postgres
    image: postgres:latest
    volumes:
      - ./.volumes/db:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - 5432:5432
    networks:
      - backend
    
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./.volumes/elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks: 
      - observability
   
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks: 
      - observability

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:7.15.2
    container_name: metricbeat
    user: root
    volumes:      
      - /var/run/docker.sock:/var/run/docker.sock
      - ./beats/metric/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml
    restart: on-failure
    networks: 
      - observability

networks:
  backend:
    driver: bridge
  observability:
    driver: "bridge"
